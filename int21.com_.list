EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
int21.com_ -- emu8086 assembler version: 4.08  
 
[ 24/06/2021  --  14:56:35 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       ; this sample gets a string from a user, then it prints it out.
[   2]        :                                       ; this example uses dos interrupt: 21h
[   3]        :                                       
[   4]        :                                       name "int21"
[   5]        :                                       
[   6]        :                                       org  100h
[   7]        :                                       
[   8]    0100: E9 EE 00                              jmp start
[   9]        :                                       
[  10]        :                                       
[  11]        :                                       ; when no file path is specified the default file path is:
[  12]        :                                       ;   c:\emu8086\MyBuild
[  13]        :                                       
[  14]        :                                       ; if path is specified, it is emulated in:
[  15]        :                                       ;   c:\emu8086\vdrive\
[  16]        :                                       ; for example, c:\test.txt is c:\emu8086\vdrive\c\test.txt
[  17]        :                                       ; this is done to prevent disasters and accidental overwriting of valuable files.
[  18]        :                                       ; relative paths such as "c:\mydir\..\autoexec.bat" are disabled for the same reasons.
[  19]        :                                       
[  20]        :                                       
[  21]        :                                       ; declarations:
[  22]        :                                       
[  23]        :                                       ; buffers hold ascii chars for INT 21h/0Ah input function,
[  24]        :                                       ; first byte is its maximum size, second byte: actual size.
[  25]        :                                       
[  26]        :                                       ; format of INT 21h/0Ah input buffer:
[  27]        :                                       ;  -byte-offset-     -number-of-bytes-             -description-
[  28]        :                                       ;      00                  1                        buffer size
[  29]        :                                       ;      01                  1                        number of characters actually read (excluding cr).
[  30]        :                                       ;      02             1 to buffer-size              actual buffer contents (including cr).
[  31]        :                                       
[  32]    0103: 64 00 20 20 20 20 20 20 20 20 20 20   s1        db 100,?, 100 dup(' ')
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20                   
[  33]    0169: 64 00 20 20 20 20 20 20 20 20 20 20   t2        db 100,?, 100 dup(' ')
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20                   
[  34]    01CF: 1E 00 20 20 20 20 20 20 20 20 20 20   filename  db 30,?, 30 dup(' ')   ; file name should be in 8.3 - dos compatible format.
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20             
[  35]        :                                       
[  36]        :                                       
[  37]        :                                       ; file handle:
[  38]    01EF: 00 00                                 handle   dw   0
[  39]        :                                       
[  40]        :                                       
[  41]        :                                       ; set segment registers to code:
[  42]    01F1: 8C C8                                 start:  mov ax, cs
[  43]    01F3: 8E D8                                 mov ds, ax
[  44]    01F5: 8E C0                                 mov es, ax
[  45]        :                                       
[  46]    01F7: EB 11                                 jmp m1
[  47]    01F9: 65 6E 74 65 72 20 61 6E 79 20 74 65   msg1    db  "enter any text: $"
                78 74 3A 20 24                      
[  48]    020A: BA F9 01                              m1:     mov dx, offset msg1
[  49]    020D: B4 09                                 mov ah, 9
[  50]    020F: CD 21                                 int 21h
[  51]        :                                       ; input a string:
[  52]    0211: BA 03 01                              mov dx, offset s1
[  53]    0214: B4 0A                                 mov ah, 0ah
[  54]    0216: CD 21                                 int 21h
[  55]        :                                       
[  56]        :                                       
[  57]        :                                       
[  58]    0218: EB 14                                 jmp m2
[  59]    021A: 0D 0A 65 6E 74 65 72 20 66 69 6C 65   msg2    db  0Dh,0Ah,"enter file name: $"
                20 6E 61 6D 65 3A 20 24             
[  60]    022E: BA 1A 02                              m2:     mov dx, offset msg2
[  61]    0231: B4 09                                 mov ah, 9
[  62]    0233: CD 21                                 int 21h
[  63]        :                                       ; input filename:
[  64]    0235: BA CF 01                              mov dx, offset filename
[  65]    0238: B4 0A                                 mov ah, 0ah
[  66]    023A: CD 21                                 int 21h
[  67]        :                                       
[  68]        :                                       ; set 0 to the end of the filename:
[  69]    023C: 33 DB                                 xor bx, bx
[  70]    023E: 8A 1E D0 01                           mov bl, filename[1]  ; get actual size.
[  71]    0242: C6 87 D1 01 00                        mov filename[bx+2], 0
[  72]        :                                       
[  73]        :                                       ; create new file:
[  74]    0247: B9 00 00                              mov cx, 0
[  75]    024A: B4 3C                                 mov ah, 3ch
[  76]    024C: BA D1 01                              mov dx, offset filename+2
[  77]    024F: CD 21                                 int 21h
[  78]    0251: 73 03 E9 7E 00                        jc  error
[  79]    0256: A3 EF 01                              mov handle, ax
[  80]        :                                       ; write buffer to file:
[  81]    0259: B4 40                                 mov ah, 40h
[  82]    025B: 8B 1E EF 01                           mov bx, handle
[  83]    025F: BA 05 01                              mov dx, offset s1+2
[  84]    0262: 33 C9                                 xor cx, cx
[  85]    0264: 8A 0E 04 01                           mov cl, s1[1]
[  86]    0268: CD 21                                 int 21h
[  87]    026A: 72 68                                 jc  error
[  88]        :                                       ; close file
[  89]    026C: 8B 1E EF 01                           mov bx, handle
[  90]    0270: B4 3E                                 mov ah, 3eh
[  91]    0272: CD 21                                 int 21h
[  92]    0274: 72 5E                                 jc error
[  93]        :                                       
[  94]        :                                       
[  95]        :                                       
[  96]        :                                       ; open existing file:
[  97]    0276: B0 00                                 mov al, 0     ; read.
[  98]    0278: B4 3D                                 mov ah, 3dh
[  99]    027A: BA D1 01                              mov dx, offset filename+2
[ 100]    027D: CD 21                                 int 21h
[ 101]    027F: 72 53                                 jc  error
[ 102]    0281: A3 EF 01                              mov handle, ax
[ 103]        :                                       ; read bytes from file
[ 104]    0284: B4 3F                                 mov ah, 3fh
[ 105]    0286: 8B 1E EF 01                           mov bx, handle
[ 106]    028A: 33 C9                                 xor cx, cx
[ 107]    028C: 8A 0E 69 01                           mov cl, t2[0]
[ 108]    0290: BA 6B 01                              mov dx, offset t2[2]
[ 109]    0293: CD 21                                 int 21h
[ 110]    0295: 72 3D                                 jc error
[ 111]    0297: A2 6A 01                              mov t2[1], al
[ 112]        :                                       ; close file
[ 113]    029A: 8B 1E EF 01                           mov bx, handle
[ 114]    029E: B4 3E                                 mov ah, 3eh
[ 115]    02A0: CD 21                                 int 21h
[ 116]    02A2: 72 30                                 jc error
[ 117]    02A4: EB 13                                 jmp m3
[ 118]    02A6: 0D 0A 72 65 61 64 20 66 72 6F 6D 20   msg3    db  0Dh,0Ah,"read from file: $"
                66 69 6C 65 3A 20 24                
[ 119]    02B9: BA A6 02                              m3:     mov dx, offset msg3
[ 120]    02BC: B4 09                                 mov ah, 9
[ 121]    02BE: CD 21                                 int 21h
[ 122]        :                                       ; set '$' to the end of the buffer:
[ 123]    02C0: 33 DB                                 xor bx, bx
[ 124]    02C2: 8A 1E 6A 01                           mov bl, t2[1]        ; get actual size.
[ 125]    02C6: C6 87 6B 01 24                        mov t2[bx+2], '$'
[ 126]        :                                       ; print the buffer:
[ 127]    02CB: BA 6B 01                              mov dx, offset t2[2] ; skip 2 control bytes.
[ 128]    02CE: B4 09                                 mov ah, 9
[ 129]    02D0: CD 21                                 int 21h
[ 130]        :                                       
[ 131]        :                                       
[ 132]    02D2: EB 16                                 jmp ok
[ 133]        :                                       
[ 134]        :                                       ; print error message:
[ 135]    02D4: EB 0D                                 error:  jmp m5
[ 136]    02D6: 0D 0A 65 72 72 6F 72 2E 2E 2E 0D 0A   msg5    db  0Dh,0Ah,"error...",0Dh,0Ah,'$'
                24                                  
[ 137]    02E3: BA D6 02                              m5:     mov dx, offset msg5
[ 138]    02E6: B4 09                                 mov ah, 9
[ 139]    02E8: CD 21                                 int 21h
[ 140]        :                                       
[ 141]        :                                       
[ 142]    02EA:                                       ok:
[ 143]    02EA: EB 15                                 jmp m4
[ 144]    02EC: 0D 0A 70 72 65 73 73 20 61 6E 79 20   msg4    db  0Dh,0Ah,"press any key...",0Dh,0Ah,'$'
                6B 65 79 2E 2E 2E 0D 0A 24          
[ 145]    0301: BA EC 02                              m4:     mov dx, offset msg4
[ 146]    0304: B4 09                                 mov ah, 9
[ 147]    0306: CD 21                                 int 21h
[ 148]    0308: B4 00                                 mov ah, 0
[ 149]    030A: CD 16                                 int 16h
[ 150]        :                                       
[ 151]        :                                       
[ 152]        :                                       ; exit to the operating system:
[ 153]    030C: B4 4C                                 mov ah, 4ch
[ 154]    030E: CD 21                                 int 21h
[ 155]        :                                       
[ 156]        :                                       
[ 157]        :                                       
[ 158]        :                                       
[ 159]        :                                       
 
===================================================================================================
 




===================================================================================================
